
hi20 and lo32: normalized mantissa

bexp: biased exponent

<<double parts - big endian>>=
struct {
    unsigned int sign:1;
    unsigned int bexp:11;
    unsigned int hi20:20;
    uint32_t lo32;
} parts;
@

<<double parts - little endian>>=
struct {
    uint32_t lo32;
    unsigned int hi20:20;
    unsigned int bexp:11;
    unsigned int sign:1;
} parts;
@

<<u32 parts - big endian>>=
struct {
    uint32_t hi;
    uint32_t lo;
} u32;
@

<<u32 parts - little endian>>=
struct {
    uint32_t lo;
    uint32_t hi;
} u32;
@

nm is "normalized mantissa"

eas is "exponent and signal"

<<normal parts - big endian>>=
struct {
    unsigned int eas:12;
    unsigned int hi20:20;
    uint32_t lo32;
} normal;
@

<<normal parts - little endian>>=
struct {
    uint32_t lo32;
    unsigned int hi20:20;
    unsigned int eas:12;
} normal;
@

<<unions>>=
union double_value {
    <<double parts>>
    <<u32 parts>>
    <<normal parts>>
    unsigned char o[8]; /* octets */
    double d;
    int64_t i;
    uint64_t u;
};
@

<<static initialized default nan - big endian>>=
1, DBLEXP(1024), 0x80000, 0
@

<<static initialized default nan - little endian>>=
0, 0x80000, DBLEXP(1024), 1
@

<<static initialized +inf - big endian>>=
0, DBLEXP(1024), 0, 0
@

<<static initialized +inf - little endian>>=
0, 0, DBLEXP(1024), 0
@

<<static initialized -inf - big endian>>=
1, DBLEXP(1024), 0, 0
@

<<static initialized -inf - little endian>>=
0, 0, DBLEXP(1024), 1
@

<<impl>>=
union double_value dnan = {{ <<static initialized default nan>> }};
@

The exponent is biased, must denormalize it with DBLEXP to create a double.

<<definitions>>=
#define DBLEXP(x) (1023+(x))
#define DBLEXP_NORMALIZE(x) ((x)-1023)
@

<<protos>>=
double
create_double(unsigned sign, unsigned bexp, uint32_t hi20, uint32_t lo32);
@

The bitwise 'and' serves to silence compiler warnings.

<<impl>>=
double
create_double(unsigned sign, unsigned bexp, uint32_t hi20, uint32_t lo32)
{
    union double_value x;
    x.parts.sign = sign & 0x1;
    x.parts.bexp = bexp & 0x7ff;
    x.parts.hi20 = hi20 & 0xfffff;
    x.parts.lo32 = lo32;
    return x.d;
}
@

<<protos>>=
double
machine_epsilon(double x);
@

<<impl>>=
double
machine_epsilon(double x)
{
    union double_value v;
    v.d = x;
    /* v.parts.lo32++; */
    /* return v.parts.sign ? x - v.d : v.d - x; */
    v.i++;
    return v.i < 0 ? x - v.d : v.d - x;
}
@

<<all 52 set>>=
0xfffff, 0xffffffff
@

<<lower 51 set>>=
0x7ffff, 0xffffffff
@

<<largest double>>=
DBLEXP(1023), <<all 52 set>>
@

<<first snan>>=
DBLEXP(1024), 0, 1
@

<<last snan>>=
DBLEXP(1024), 0x7ffff, 0xffffffff
@

<<first qnan>>=
DBLEXP(1024), 0x80000, 0
@

<<last qnan>>=
DBLEXP(1024), <<all 52 set>>
@
