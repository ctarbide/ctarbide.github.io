#!/bin/sh
# Copyright (c) 2024 by C. Tarbide. You may do as you please with
# this code as long as you do not remove this copyright notice or
# hold me liable for its use.
SH=${SH:-sh}; export SH
exec nofake-exec.sh --error Makefile.nw -- "${SH}" -eu > Makefile.wip
exit 1

Limit the responsibilities of Makefile and delegate the heavy work back to
sh/nofake as soon as possible.

To generate/update Makefile, simply do:

    nofake Makefile.nw | sh > Makefile.wip

<<primary sources>>=
Makefile.nw wip.nw
@

<<other sources>>=
<<wip.c deps>>
@

<<*>>=
#!/bin/sh
set -eu
SH=${SH:-sh}; export SH
( <<output sources>> ) > sources.nw
( <<output targets>> ) > targets.nw
nofake-exec.sh --error -R'output deps' Makefile.nw sources.nw targets.nw \
    --tmp-- .deps -- "${SH}" -eu > deps.nw
nofake-exec.sh --error -R'output builds.nw' Makefile.nw sources.nw targets.nw \
    deps.nw --tmp-- .build-chunks -- "${SH}" -eu > builds.nw
nofake --error -R'generate Makefile' <<primary sources>> \
    sources.nw targets.nw deps.nw builds.nw | "${SH}" -eu
@

<<output sources>>=
printf -- '\nautomatically generated from Makefile.nw\n\n'
printf -- '@<<set sources>>=\n'
nofake --error -R'other sources' <<primary sources>> |
    normalize-args.sh | perl -lne'print(qq{set -- "\$\@" ${_};})'
printf -- '@\n'
@

<<collect targets>>=
set --
<<set sources>>
nofake --error -Rtargets "$@"
@

<<output targets>>=
printf -- '\nautomatically generated from Makefile.nw\n\n'
printf -- '@<<set targets>>=\n'
nofake --error -R'collect targets' Makefile.nw sources.nw | "${SH}" -eu |
    normalize-args.sh | perl -lne'print(qq{set -- "\$\@" ${_};})'
printf -- '@\n'
@

<<output set target deps>>=
printf -- '\n@<<set '"'"'%s'"'"' deps>>=\n' "${target}"
cat "${0}.deps"
printf -- '@\n'
@

How Makefile handle files with space? Not like this:

    while (my @a = map { qq{\047$_\047} } splice(@ARGV, 0, 3)) {

<<indent "$@">>=
perl -le'
    sub backslash(){ scalar(@ARGV) ? q{ \\} : q{} }
    while (my @a = splice(@ARGV, 0, 3)) {
        print(q{    }, join(q{ }, @a), backslash);
    }' -- "$@"
@

<<output indented target deps>>=
printf -- '\n@<<indented '"'"'%s'"'"' deps>>=\n' "${target}"
set --
. "${0}.deps"
<<indent "$@">>
printf -- '@\n'
@

<<output deps>>=
printf -- '\nautomatically generated from Makefile.nw\n'
date > "${0}.deps"
set --
<<set targets>>
for target; do (
    set --
    <<set sources>>
    nofake --error -R"${target}"' deps' "$@" | normalize-args.sh |
        perl -lne'print(qq{set -- "\$\@" ${_};})'> "${0}.deps"
    <<output set target deps>>
    <<output indented target deps>>
); done
@

<<output builds.nw>>=
set --
<<set sources>>
nofake-split.pl "$@" | perl -lne'
    next unless m{^[[:xdigit:]]{8}_1: @<<(build \047.*\047)>>=$};
    $c{$1}++;
}{
    print for sort(keys(%c));
' > "${0}.build-chunks"
printf -- '\nautomatically generated from Makefile.nw\n'
set --
<<set targets>>
for target; do (
    if perl -slne'exit 0 if $t eq $_}{exit 1' -- -t="build '${target}'" <"${0}.build-chunks"; then
        continue
    fi
    printf -- '\n@<<build '"'"'%s'"'"'>>=\n' "${target}"
    printf -- "CHMOD='chmod 0444' nofake.sh --error -L -R'%s' -o'%s' "'\\\n' \
        "${target}" "${target}"
    printf -- "    @<<indented '%s' deps>>"'\n' "${target}"
    printf -- '@\n'
); done
@

<<generate Makefile>>=
printf -- '\n# automatically generated from Makefile.nw\n\n'
printf -- 'all: \\\n'
set --
<<set targets>>
<<indent "$@">>
printf -- "\n"
for target; do (
    printf -- '%s: \\\n' "${target}"
    nofake --error -R"indented '${target}' deps" deps.nw
    perl -sle'print(qq{\tnofake-exec.sh --error -R"build \047${t}\047" deps.nw builds.nw \$^ --ba-- deps.nw builds.nw \$^ --ea-- -- '"${SH}"' -eu\n})' -- -t="${target}"
); done
printf -- 'clean:\n\t-rm -f \\\n'
<<indent "$@">>
@
